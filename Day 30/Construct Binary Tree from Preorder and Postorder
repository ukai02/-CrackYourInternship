/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* solve(vector<int>& pre,int preS,int preE, vector<int>& post,int postS,int postE){
        if(preS>preE)   return NULL;
        TreeNode* root=new TreeNode(pre[preS]);
        if(preS==preE)  return root;

        int postIndex=postS;
        while(pre[preS+1]!=post[postIndex])   postIndex++;
        int len=postIndex-postS+1;
        root->left=solve(pre,preS+1,preS+len,post,postS,postIndex);
        root->right=solve(pre,preS+len+1,preE,post,postIndex+1,postE-1);

        return root;
    }
    TreeNode* constructFromPrePost(vector<int>& pre, vector<int>& post) {
        return solve(pre,0,pre.size()-1,post,0,post.size()-1);
    }
};
