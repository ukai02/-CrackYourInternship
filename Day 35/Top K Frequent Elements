class Solution {
public:
struct Compare {
    bool operator()(pair<int,int>&a,pair<int, int>&b){
        return a.first > b.first; 
    }
};
    vector<int> topKFrequent(vector<int>& nums, int k){
     map<int,int>mp;
    for(auto&num : nums){
            mp[num]++;
        }
    
    priority_queue<pair<int,int>,vector<pair<int,int>>,Compare>minHeap;
    
  for(auto&x : mp){
    int num = x.first;  
    int freq = x.second;
    minHeap.push({freq, num});
    if (minHeap.size() > k){
        minHeap.pop();
    }
}
   vector<int>topK;
    while(!minHeap.empty()){ 
        topK.push_back(minHeap.top().second);
        minHeap.pop();
    }
    return topK;
    }
};
