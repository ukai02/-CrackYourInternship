/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // void inorder(TreeNode* root, vector<int>& ans){

//Space-O(n) for array
    //     if(root==NULL)  return;
    //     inorder(root->left,ans);
    //     ans.push_back(root->val);
    //     inorder(root->right,ans);
    // }
    // bool isValidBST(TreeNode* root) {
    //     vector<int> ans;
    //     inorder(root,ans);
    //     for(int i=0;i<ans.size()-1;i++){
    //         if(ans[i]>=ans[i+1])    return 0;
    //     }
    //     return 1;
    // }


//Space-No extra space for array
    bool verify(TreeNode* node, long long left, long long right) {
        if (node == NULL)
            return true;

        if (!(node->val < right && node->val > left))
            return false;
        return (verify(node->left, left, node->val) &&
                verify(node->right, node->val, right));
    }
    bool isValidBST(TreeNode* root) {
        return verify(root, LLONG_MIN, LLONG_MAX);
    }
};
