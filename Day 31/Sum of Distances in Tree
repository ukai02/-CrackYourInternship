class Solution {
public:
    long root_result=0;
    vector<int> count;
    int N;
    int dfsbase(unordered_map<int,vector<int>>& adj,int curr,int prev,int depth){
        int total_count=1;
        root_result+=depth;
        for(auto child:adj[curr]){
            if(child==prev) continue;
            total_count+=dfsbase(adj,child,curr,depth+1);
        }
        count[curr]=total_count;
        return  total_count;
    }
    void DFS(unordered_map<int,vector<int>>& adj,int parent,int prev,vector<int>& result){
        for(auto child:adj[parent]){
            if(child==prev) continue;

            result[child]=result[parent]-count[child]+(N-count[child]);
            DFS(adj,child,parent,result);
        }
    }
    vector<int> sumOfDistancesInTree(int n, vector<vector<int>>& edges) {
        unordered_map<int,vector<int>> adj;
        count.resize(n,0);
        N=n;
        for(auto &i:edges){
            int u=i[0];
            int v=i[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        root_result=0;
        dfsbase(adj,0,-1,0);

        vector<int>result(n,0);
        result[0]=root_result;
        DFS(adj,0,-1,result);
        return result;
    }
};
