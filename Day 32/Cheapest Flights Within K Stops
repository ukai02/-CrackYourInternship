class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<pair<int,int>> adj[n];
        for(auto i:flights){
            adj[i[0]].push_back({i[1],i[2]});
        }

        queue<pair<int,pair<int,int>>> q;
        vector<int> dist(n,1e9);
        // {stops,{node,dist}}
        q.push({0,{src,0}});
        dist[src]=0;

        while(!q.empty()){
            auto i=q.front();
            q.pop();
            int stops=i.first;
            int node=i.second.first;
            int cost=i.second.second;

            if(stops>k) continue;
            for(auto it:adj[node]){
                int adjNode=it.first;
                int edgeW=it.second;

                if(cost+edgeW < dist[adjNode] && stops<=k){
                    dist[adjNode]=cost+edgeW;
                    q.push({stops+1,{adjNode,cost+edgeW}});
                }
            }
        }
        if(dist[dst]==1e9)  return -1;
        return dist[dst];

    }
};
