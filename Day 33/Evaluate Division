class Solution {
public:
    void dfs(unordered_map<string,vector<pair<string,double>>>& adj,string src,string dest,unordered_set<string> &visited,double product,double& ans){
        if(visited.find(src)!=visited.end())
            return;
        
        visited.insert(src);
        if(src==dest){
            ans=product;
            return;
        }
        for(auto &i:adj[src]){
            string b=i.first;
            double val=i.second;

            dfs(adj,b,dest,visited,product*val,ans);
        }

    }

    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        
        int n=equations.size();
        unordered_map<string,vector<pair<string,double>>> adj;
        for(int i=0;i<n;i++){
            string a=equations[i][0];
            string b=equations[i][1];
            double c=values[i];
            adj[a].push_back({b,c});
            adj[b].push_back({a,1.0/c});
        }
cout<<1.0/2.0<<" ";
        vector<double> result;
        for(auto &i:queries){
            string src=i[0];
            string dest=i[1];

            double ans=-1.0;
            double product=1.0;

            if(adj.find(src)!=adj.end()){
                unordered_set<string> visited;
                dfs(adj,src,dest,visited,product,ans);
            }
            result.push_back(ans);
        }
        return result;
    }
};
